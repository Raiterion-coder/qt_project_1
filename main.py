import sys, shutil
from datetime import datetime
from pathlib import Path
from PyQt5 import QtWidgets, QtCore, QtGui, uic
from PyQt5.QtGui import QDesktopServices
from PyQt5.QtCore import QUrl
import matplotlib.pyplot as plt
from app.database import Database, PHOTO_DIR
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


def resource(rel):
    return str(QtCore.QDir.current().filePath(rel))


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('ui/main_window.ui', self)
        self.db = Database()

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü ---
        self.tblAccounts.setColumnCount(2)
        self.tblAccounts.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–∞–ª–∞–Ω—Å"])
        self.tblAccounts.horizontalHeader().setStretchLastSection(True)
        self.tblAccounts.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tblAccounts.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.btnShowChart.clicked.connect(self.show_chart)

        self.tblTransactions.setColumnCount(6)
        self.tblTransactions.setHorizontalHeaderLabels(["–î–∞—Ç–∞", "–°—á—ë—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–§–æ—Ç–æ"])
        self.tblTransactions.horizontalHeader().setStretchLastSection(True)
        self.tblTransactions.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tblTransactions.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        # --- –ö–Ω–æ–ø–∫–∏ ---
        self.refresh_tables()
        self.btnAddAccount.clicked.connect(self.add_account)
        self.btnAddTx.clicked.connect(self.on_add_transaction)
        self.btnShowImage.clicked.connect(self.show_image)
        self.btnDelAccount.clicked.connect(self.delete_account)
        self.btnDelTx.clicked.connect(self.delete_transaction)

    # ------------------- –û–ë–ù–û–í–õ–ï–ù–ò–ï -------------------

    def refresh_tables(self):
        accs = self.db.list_accounts()
        self.tblAccounts.setRowCount(0)
        for i, a in enumerate(accs):
            self.tblAccounts.insertRow(i)
            self.tblAccounts.setItem(i, 0, QtWidgets.QTableWidgetItem(a['name']))
            self.tblAccounts.setItem(i, 1, QtWidgets.QTableWidgetItem(str(a['balance'])))

        txs = self.db.list_transactions()
        self.tblTransactions.setRowCount(0)
        for i, t in enumerate(txs):
            self.tblTransactions.insertRow(i)
            self.tblTransactions.setItem(i, 0, QtWidgets.QTableWidgetItem(t['date']))
            self.tblTransactions.setItem(i, 1, QtWidgets.QTableWidgetItem(t['account']))
            self.tblTransactions.setItem(i, 2, QtWidgets.QTableWidgetItem(t['category']))
            self.tblTransactions.setItem(i, 3, QtWidgets.QTableWidgetItem(str(t['amount'])))
            self.tblTransactions.setItem(i, 4, QtWidgets.QTableWidgetItem(t['comment']))
            self.tblTransactions.setItem(i, 5, QtWidgets.QTableWidgetItem("üì∑" if t['photo_path'] else "-"))

    # ------------------- –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ß–Å–¢–ê -------------------

    def add_account(self):
        name, ok = QtWidgets.QInputDialog.getText(self, '–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç', '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞:')
        if not ok or not name.strip():
            return

        balance, ok = QtWidgets.QInputDialog.getDouble(
            self, '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', 0.0,
            -999999999, 999999999, 2
        )
        if not ok:
            return

        self.db.add_account(name.strip(), balance)
        self.refresh_tables()

    # ------------------- –£–î–ê–õ–ï–ù–ò–ï –°–ß–Å–¢–ê -------------------
    from PyQt5 import QtWidgets
    import matplotlib.pyplot as plt

    from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
    from matplotlib.figure import Figure

    def show_chart(self):
        accounts = self.db.list_accounts()
        if not accounts:
            QtWidgets.QMessageBox.warning(self, "–ù–µ—Ç —Å—á–µ—Ç–æ–≤", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—á—ë—Ç.")
            return

        items = [f"{a['id']} - {a['name']}" for a in accounts]
        item, ok = QtWidgets.QInputDialog.getItem(self, "–í—ã–±–æ—Ä —Å—á—ë—Ç–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:", items, 0, False)
        if not ok or not item:
            return

        selected_id = int(item.split(" - ")[0])
        txs = [t for t in self.db.list_transactions() if t["id"] and t["account"] and self.db.conn.execute(
            "SELECT id FROM accounts WHERE name=?", (t["account"],)
        ).fetchone()["id"] == selected_id]

        if not txs:
            QtWidgets.QMessageBox.information(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return

        daily = {}
        for t in txs:
            d = t["date"]
            amt = float(t["amount"])
            daily[d] = daily.get(d, 0) + amt

        try:
            dates = [datetime.strptime(d, "%Y-%m-%d") for d in sorted(daily.keys())]
        except Exception:
            dates = sorted(daily.keys())

        balance = []
        cur = 0
        for d in sorted(daily.keys()):
            cur += daily[d]
            balance.append(cur)

        account = next((a for a in accounts if a["id"] == selected_id), None)

        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle(f"–ì—Ä–∞—Ñ–∏–∫ —Å—á—ë—Ç–∞: {account['name']}")
        dialog.resize(900, 600)

        fig = Figure(figsize=(9, 6))
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)

        layout = QtWidgets.QVBoxLayout(dialog)
        layout.addWidget(canvas)

        ax.plot(dates, balance, marker='o', linestyle='-', linewidth=2)
        ax.grid(True)
        ax.set_title(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {account['name']}")
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel("–ë–∞–ª–∞–Ω—Å")

        canvas.draw()
        dialog.exec_()

    def delete_account(self):
        row = self.tblAccounts.currentRow()
        if row < 0:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        name = self.tblAccounts.item(row, 0).text()

        reply = QtWidgets.QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç '{name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        if reply != QtWidgets.QMessageBox.Yes:
            return

        self.db.conn.execute("DELETE FROM transactions WHERE account_id = (SELECT id FROM accounts WHERE name=?)",
                             (name,))
        self.db.conn.execute("DELETE FROM accounts WHERE name=?", (name,))
        self.db.conn.commit()

        self.refresh_tables()
        QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°—á—ë—Ç '{name}' —É–¥–∞–ª—ë–Ω.")

    # ------------------- –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò -------------------

    def on_add_transaction(self):
        dlg = QtWidgets.QDialog(self)
        uic.loadUi(str(Path(__file__).parent / "ui" / "add_transaction.ui"), dlg)

        dateEdit = dlg.findChild(QtWidgets.QDateEdit, "dateEdit")
        cmbAccount = dlg.findChild(QtWidgets.QComboBox, "cmbAccount")
        edtCategory = dlg.findChild(QtWidgets.QLineEdit, "edtCategory")
        spinAmount = dlg.findChild(QtWidgets.QDoubleSpinBox, "spinAmount")
        edtComment = dlg.findChild(QtWidgets.QLineEdit, "edtComment")
        buttonBox = dlg.findChild(QtWidgets.QDialogButtonBox, "buttonBox")
        btnAddPhoto = dlg.findChild(QtWidgets.QPushButton, "btnAddPhoto")
        btnOpenPhoto = dlg.findChild(QtWidgets.QPushButton, "btnOpenPhoto")
        lblPhotoPath = dlg.findChild(QtWidgets.QLabel, "lblPhotoPath")

        photo_path = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞
        accounts = self.db.list_accounts()
        for a in accounts:
            cmbAccount.addItem(a["name"], a["id"])

        # –í—ã–±–æ—Ä —Ñ–æ—Ç–æ
        def select_photo():
            nonlocal photo_path
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.bmp)"
            )
            if file_path:
                dest = PHOTO_DIR / Path(file_path).name
                try:
                    shutil.copy(file_path, dest)
                    photo_path = str(dest)
                    lblPhotoPath.setText(Path(file_path).name)
                except Exception as e:
                    QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª:\n{e}")

        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ç–æ
        def open_photo():
            if photo_path and Path(photo_path).exists():
                QDesktopServices.openUrl(QUrl.fromLocalFile(photo_path))
            else:
                QtWidgets.QMessageBox.warning(self, "–§–æ—Ç–æ", "–§–æ—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        btnAddPhoto.clicked.connect(select_photo)
        btnOpenPhoto.clicked.connect(open_photo)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ OK
        def handle_accept():
            date = dateEdit.date().toString("yyyy-MM-dd")
            account_id = cmbAccount.currentData()
            category = edtCategory.text().strip()
            amount = float(spinAmount.value())
            comment = edtComment.text().strip()

            if account_id is None:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç")
                return
            if amount == 0:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0")
                return

            rbtnExpense = dlg.findChild(QtWidgets.QRadioButton, "rbtnExpense")
            rbtnIncome = dlg.findChild(QtWidgets.QRadioButton, "rbtnIncome")

            # üí• –í–æ—Ç –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
            if rbtnExpense.isChecked():
                amount = -abs(amount)  # —Ä–∞—Å—Ö–æ–¥ -> –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            else:
                amount = abs(amount)  # –¥–æ—Ö–æ–¥ -> –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

            self.db.add_transaction(date, account_id, category, amount, comment, photo_path)
            self.db.update_account_balance(account_id, amount)
            dlg.accept()

        buttonBox.accepted.connect(handle_accept)
        buttonBox.rejected.connect(dlg.reject)

        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self.refresh_tables()

    # ------------------- –£–î–ê–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò -------------------

    def delete_transaction(self):
        row = self.tblTransactions.currentRow()
        if row < 0:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        date = self.tblTransactions.item(row, 0).text()
        account = self.tblTransactions.item(row, 1).text()
        category = self.tblTransactions.item(row, 2).text()
        amount = float(self.tblTransactions.item(row, 3).text())

        reply = QtWidgets.QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é '{category}' ({amount})?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        if reply != QtWidgets.QMessageBox.Yes:
            return

        # –ü–æ–ª—É—á–∞–µ–º account_id
        cur = self.db.conn.cursor()
        cur.execute("SELECT id FROM accounts WHERE name=?", (account,))
        acc = cur.fetchone()
        if not acc:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        account_id = acc["id"]

        # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        cur.execute("""
            DELETE FROM transactions 
            WHERE date=? AND account_id=? AND category=? AND amount=?
        """, (date, account_id, category, amount))
        self.db.conn.commit()

        # –í–æ–∑–≤—Ä–∞—Ç —Å—É–º–º—ã –Ω–∞ —Å—á—ë—Ç
        self.db.update_account_balance(account_id, -amount)

        self.refresh_tables()
        QtWidgets.QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")

    # ------------------- –ü–†–û–°–ú–û–¢–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø -------------------

    def show_image(self):
        row = self.tblTransactions.currentRow()
        if row < 0:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
            return

        date = self.tblTransactions.item(row, 0).text()
        account = self.tblTransactions.item(row, 1).text()
        category = self.tblTransactions.item(row, 2).text()
        amount = float(self.tblTransactions.item(row, 3).text())

        cur = self.db.conn.cursor()
        cur.execute("""
            SELECT t.photo_path FROM transactions t
            JOIN accounts a ON a.id = t.account_id
            WHERE t.date=? AND a.name=? AND t.category=? AND t.amount=?
        """, (date, account, category, amount))
        row = cur.fetchone()

        if row and row["photo_path"] and Path(row["photo_path"]).exists():
            QDesktopServices.openUrl(QUrl.fromLocalFile(row["photo_path"]))
        else:
            QtWidgets.QMessageBox.information(self, "–§–æ—Ç–æ", "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")


# ------------------- –ó–ê–ü–£–°–ö -------------------

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())
